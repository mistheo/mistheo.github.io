// vinyl-player.js
// Gestionnaire de lecture audio pour le lecteur vinyle

function vinylPlayer() {
    return {
        // √âtat du lecteur
        isPlaying: false,
        isLoading: false,
        audio: null,
        volume: 0.3,
        secretClicks: 0,
        lastClickTime: 0,
        secretAudioSrc: 'assets/audio/secret.wav',

        
        // Configuration audio
        audioConfig: {
            // Remplacez par le chemin vers votre fichier audio
            audioSrc: 'assets/audio/background-music.wav',
            // Autres options
            loop: true,
            preload: 'metadata'
        },

        // Initialisation du composant
        init() {
            this.initAudio();
            
            // √âcouteurs d'√©v√©nements
            window.addEventListener('beforeunload', () => {
                this.cleanup();
            });
            this.handleEasterEggClick();
        },

        // Initialisation de l'objet Audio
        initAudio() {
            try {
                this.audio = new Audio();
                this.audio.src = this.audioConfig.audioSrc;
                this.audio.loop = this.audioConfig.loop;
                this.audio.preload = this.audioConfig.preload;
                this.audio.volume = this.volume;

                // √âv√©nements audio
                this.setupAudioEvents();
                
                console.log('Audio initialis√© avec succ√®s');
            } catch (error) {
                console.error('Erreur lors de l\'initialisation de l\'audio:', error);
                this.showError('Impossible de charger le fichier audio');
            }
        },

        // Configuration des √©v√©nements audio
        setupAudioEvents() {
            if (!this.audio) return;

            // Quand l'audio peut commencer √† jouer
            this.audio.addEventListener('canplay', () => {
                this.isLoading = false;
                console.log('Audio pr√™t √† √™tre lu');
            });

            // Quand l'audio commence √† jouer
            this.audio.addEventListener('play', () => {
                this.isPlaying = true;
                console.log('Lecture d√©marr√©e');
            });

            // Quand l'audio est en pause
            this.audio.addEventListener('pause', () => {
                this.isPlaying = false;
                console.log('Lecture mise en pause');
            });

            // Quand l'audio se termine
            this.audio.addEventListener('ended', () => {
                this.isPlaying = false;
                console.log('Lecture termin√©e');
            });

            // Gestion des erreurs
            this.audio.addEventListener('error', (e) => {
                this.isLoading = false;
                this.isPlaying = false;
                console.error('Erreur audio:', e);
                this.showError('Erreur lors de la lecture du fichier audio');
            });

            // Quand l'audio commence √† charger
            this.audio.addEventListener('loadstart', () => {
                this.isLoading = true;
                console.log('Chargement de l\'audio...');
            });

            // Quand l'audio a suffisamment charg√©
            this.audio.addEventListener('loadeddata', () => {
                this.isLoading = false;
                console.log('Audio charg√©');
            });
        },

        // Basculer entre lecture et pause
        async togglePlay() {
            if (!this.audio) {
                console.error('Audio non initialis√©');
                return;
            }

            try {
                if (this.isPlaying) {
                    await this.pause();
                } else {
                    await this.play();
                }
            } catch (error) {
                console.error('Erreur lors de la lecture/pause:', error);
                this.showError('Erreur lors de la lecture');
            }
        },

        // D√©marrer la lecture
        async play() {
            if (!this.audio) return;

            try {
                this.isLoading = true;
                await this.audio.play();
                console.log('Lecture d√©marr√©e avec succ√®s');
            } catch (error) {
                this.isLoading = false;
                this.isPlaying = false;
                
                // Gestion sp√©cifique des erreurs de lecture automatique
                if (error.name === 'NotAllowedError') {
                    this.showError('Interaction utilisateur requise pour d√©marrer l\'audio');
                    console.warn('Lecture automatique bloqu√©e par le navigateur');
                } else {
                    this.showError('Impossible de lire le fichier audio');
                    console.error('Erreur de lecture:', error);
                }
                throw error;
            }
        },

        // Mettre en pause
        async pause() {
            if (!this.audio) return;

            try {
                this.audio.pause();
                console.log('Lecture mise en pause');
            } catch (error) {
                console.error('Erreur lors de la pause:', error);
                throw error;
            }
        },

        // Arr√™ter compl√®tement
        stop() {
            if (!this.audio) return;

            try {
                this.audio.pause();
                this.audio.currentTime = 0;
                this.isPlaying = false;
                console.log('Lecture arr√™t√©e');
            } catch (error) {
                console.error('Erreur lors de l\'arr√™t:', error);
            }
        },

        // D√©finir le volume
        setVolume(newVolume) {
            if (!this.audio) return;

            try {
                const vol = Math.max(0, Math.min(1, parseFloat(newVolume)));
                this.audio.volume = vol;
                this.volume = vol;
                console.log('Volume d√©fini √†:', vol);
            } catch (error) {
                console.error('Erreur lors du r√©glage du volume:', error);
            }
        },

        // Obtenir la dur√©e totale
        getDuration() {
            return this.audio ? this.audio.duration : 0;
        },

        // Obtenir le temps actuel
        getCurrentTime() {
            return this.audio ? this.audio.currentTime : 0;
        },

        // D√©finir la position de lecture
        setCurrentTime(time) {
            if (!this.audio) return;

            try {
                this.audio.currentTime = Math.max(0, Math.min(this.getDuration(), time));
            } catch (error) {
                console.error('Erreur lors du r√©glage de la position:', error);
            }
        },

        // Afficher une erreur (vous pouvez personnaliser cette m√©thode)
        showError(message) {
            console.error(message);
            // Option 2: Notification personnalis√©e (si vous avez un syst√®me de notifications)
            // this.showNotification(message, 'error');
        },

        // Nettoyage des ressources
        cleanup() {
            if (this.audio) {
                this.audio.pause();
                this.audio.src = '';
                this.audio = null;
                console.log('Ressources audio nettoy√©es');
            }
        },

        handleEasterEggClick() {
            const now = Date.now();
            
            // Si plus de 1.5s entre les clics, on reset
            if (now - this.lastClickTime > 1500) {
                console.log(this.lastClickTime, now);
                this.secretClicks = 0;
            }

            this.secretClicks++;
            this.lastClickTime = now;

            if (this.secretClicks >= 7) {
                this.secretClicks = 0;
                this.playSecretAudio();
            }
        },

        playSecretAudio() {
            try {
                const secretAudio = new Audio(this.secretAudioSrc);
                secretAudio.volume = this.volume;
                secretAudio.play();
                console.log('üéµ Easter egg activ√© : secret.wav jou√©');
            } catch (error) {
                console.error('Erreur lors de la lecture de secret.wav:', error);
            }
        },
    }
}

// Fonction utilitaire pour v√©rifier le support audio
function checkAudioSupport() {
    const audio = document.createElement('audio');
    const canPlayWav = audio.canPlayType('audio/wav');
    const canPlayMp3 = audio.canPlayType('audio/mpeg');
    
    console.log('Support WAV:', canPlayWav);
    console.log('Support MP3:', canPlayMp3);
    
    return {
        wav: canPlayWav !== '',
        mp3: canPlayMp3 !== ''
    };
}

// Initialisation globale (optionnelle)
document.addEventListener('DOMContentLoaded', function() {
    console.log('Vinyl Player JS charg√©');
    console.log('Support audio:', checkAudioSupport());
});

// Export pour modules ES6 (si n√©cessaire)
// export { vinylPlayer, checkAudioSupport };